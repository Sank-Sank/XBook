package sank.xbook.database.greendao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import sank.xbook.database.Chapters;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAPTERS".
*/
public class ChaptersDao extends AbstractDao<Chapters, Long> {

    public static final String TABLENAME = "CHAPTERS";

    /**
     * Properties of entity Chapters.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CustomId = new Property(1, Long.class, "customId", false, "CUSTOM_ID");
        public final static Property SectionTables = new Property(2, String.class, "sectionTables", false, "SECTION_TABLES");
        public final static Property SectionContent = new Property(3, String.class, "sectionContent", false, "SECTION_CONTENT");
    }

    private Query<Chapters> books_ChaptersQuery;

    public ChaptersDao(DaoConfig config) {
        super(config);
    }
    
    public ChaptersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAPTERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CUSTOM_ID\" INTEGER," + // 1: customId
                "\"SECTION_TABLES\" TEXT," + // 2: sectionTables
                "\"SECTION_CONTENT\" TEXT);"); // 3: sectionContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAPTERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Chapters entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindLong(2, customId);
        }
 
        String sectionTables = entity.getSectionTables();
        if (sectionTables != null) {
            stmt.bindString(3, sectionTables);
        }
 
        String sectionContent = entity.getSectionContent();
        if (sectionContent != null) {
            stmt.bindString(4, sectionContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Chapters entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindLong(2, customId);
        }
 
        String sectionTables = entity.getSectionTables();
        if (sectionTables != null) {
            stmt.bindString(3, sectionTables);
        }
 
        String sectionContent = entity.getSectionContent();
        if (sectionContent != null) {
            stmt.bindString(4, sectionContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Chapters readEntity(Cursor cursor, int offset) {
        Chapters entity = new Chapters( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // customId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sectionTables
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // sectionContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Chapters entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSectionTables(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSectionContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Chapters entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Chapters entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Chapters entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chapters" to-many relationship of Books. */
    public List<Chapters> _queryBooks_Chapters(Long customId) {
        synchronized (this) {
            if (books_ChaptersQuery == null) {
                QueryBuilder<Chapters> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomId.eq(null));
                books_ChaptersQuery = queryBuilder.build();
            }
        }
        Query<Chapters> query = books_ChaptersQuery.forCurrentThread();
        query.setParameter(0, customId);
        return query.list();
    }

}
